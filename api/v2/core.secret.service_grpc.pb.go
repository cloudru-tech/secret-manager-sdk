// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: v2/core.secret.service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretService_Create_FullMethodName         = "/cloud.csm.core.v2.SecretService/Create"
	SecretService_Get_FullMethodName            = "/cloud.csm.core.v2.SecretService/Get"
	SecretService_Update_FullMethodName         = "/cloud.csm.core.v2.SecretService/Update"
	SecretService_Delete_FullMethodName         = "/cloud.csm.core.v2.SecretService/Delete"
	SecretService_Search_FullMethodName         = "/cloud.csm.core.v2.SecretService/Search"
	SecretService_Access_FullMethodName         = "/cloud.csm.core.v2.SecretService/Access"
	SecretService_AddVersion_FullMethodName     = "/cloud.csm.core.v2.SecretService/AddVersion"
	SecretService_DestroyVersion_FullMethodName = "/cloud.csm.core.v2.SecretService/DestroyVersion"
	SecretService_UpdateVersion_FullMethodName  = "/cloud.csm.core.v2.SecretService/UpdateVersion"
)

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretServiceClient interface {
	Create(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	Get(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	Update(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error)
	Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Search is used to retrieve a list of secrets by
	// given filters, located in the folder path. It will return recursively
	// all secrets in the folder and its subfolders if the subject have access to that path.
	Search(ctx context.Context, in *SearchSecretRequest, opts ...grpc.CallOption) (*SearchSecretResponse, error)
	// Access is used to retrieve a secret value of given secret version.
	Access(ctx context.Context, in *AccessSecretRequest, opts ...grpc.CallOption) (*AccessSecretResponse, error)
	AddVersion(ctx context.Context, in *AddVersionRequest, opts ...grpc.CallOption) (*AddVersionResponse, error)
	DestroyVersion(ctx context.Context, in *DestroyVersionRequest, opts ...grpc.CallOption) (*DestroyVersionResponse, error)
	UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*UpdateVersionResponse, error)
}

type secretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretServiceClient(cc grpc.ClientConnInterface) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) Create(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) Get(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) Update(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecretService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) Search(ctx context.Context, in *SearchSecretRequest, opts ...grpc.CallOption) (*SearchSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) Access(ctx context.Context, in *AccessSecretRequest, opts ...grpc.CallOption) (*AccessSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_Access_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) AddVersion(ctx context.Context, in *AddVersionRequest, opts ...grpc.CallOption) (*AddVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVersionResponse)
	err := c.cc.Invoke(ctx, SecretService_AddVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) DestroyVersion(ctx context.Context, in *DestroyVersionRequest, opts ...grpc.CallOption) (*DestroyVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyVersionResponse)
	err := c.cc.Invoke(ctx, SecretService_DestroyVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*UpdateVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVersionResponse)
	err := c.cc.Invoke(ctx, SecretService_UpdateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
// All implementations must embed UnimplementedSecretServiceServer
// for forward compatibility.
type SecretServiceServer interface {
	Create(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	Get(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	Update(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error)
	Delete(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error)
	// Search is used to retrieve a list of secrets by
	// given filters, located in the folder path. It will return recursively
	// all secrets in the folder and its subfolders if the subject have access to that path.
	Search(context.Context, *SearchSecretRequest) (*SearchSecretResponse, error)
	// Access is used to retrieve a secret value of given secret version.
	Access(context.Context, *AccessSecretRequest) (*AccessSecretResponse, error)
	AddVersion(context.Context, *AddVersionRequest) (*AddVersionResponse, error)
	DestroyVersion(context.Context, *DestroyVersionRequest) (*DestroyVersionResponse, error)
	UpdateVersion(context.Context, *UpdateVersionRequest) (*UpdateVersionResponse, error)
	mustEmbedUnimplementedSecretServiceServer()
}

// UnimplementedSecretServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretServiceServer struct{}

func (UnimplementedSecretServiceServer) Create(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretServiceServer) Get(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretServiceServer) Update(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSecretServiceServer) Delete(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSecretServiceServer) Search(context.Context, *SearchSecretRequest) (*SearchSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSecretServiceServer) Access(context.Context, *AccessSecretRequest) (*AccessSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}
func (UnimplementedSecretServiceServer) AddVersion(context.Context, *AddVersionRequest) (*AddVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVersion not implemented")
}
func (UnimplementedSecretServiceServer) DestroyVersion(context.Context, *DestroyVersionRequest) (*DestroyVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyVersion not implemented")
}
func (UnimplementedSecretServiceServer) UpdateVersion(context.Context, *UpdateVersionRequest) (*UpdateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersion not implemented")
}
func (UnimplementedSecretServiceServer) mustEmbedUnimplementedSecretServiceServer() {}
func (UnimplementedSecretServiceServer) testEmbeddedByValue()                       {}

// UnsafeSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServiceServer will
// result in compilation errors.
type UnsafeSecretServiceServer interface {
	mustEmbedUnimplementedSecretServiceServer()
}

func RegisterSecretServiceServer(s grpc.ServiceRegistrar, srv SecretServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretService_ServiceDesc, srv)
}

func _SecretService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).Create(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).Get(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).Update(ctx, req.(*UpdateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).Delete(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).Search(ctx, req.(*SearchSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_Access_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).Access(ctx, req.(*AccessSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_AddVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).AddVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_AddVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).AddVersion(ctx, req.(*AddVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_DestroyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DestroyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_DestroyVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DestroyVersion(ctx, req.(*DestroyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_UpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).UpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_UpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).UpdateVersion(ctx, req.(*UpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretService_ServiceDesc is the grpc.ServiceDesc for SecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.csm.core.v2.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SecretService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SecretService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SecretService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SecretService_Delete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SecretService_Search_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _SecretService_Access_Handler,
		},
		{
			MethodName: "AddVersion",
			Handler:    _SecretService_AddVersion_Handler,
		},
		{
			MethodName: "DestroyVersion",
			Handler:    _SecretService_DestroyVersion_Handler,
		},
		{
			MethodName: "UpdateVersion",
			Handler:    _SecretService_UpdateVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/core.secret.service.proto",
}
